.TH ELF_FLAGPHDR 3 "June 2024" "Elfutils" "Library Functions Manual"

.SH NAME
elf_flagphdr \- set or clear flags for an ELF program header table

.SH SYNOPSIS
.B #include <libelf.h>

.BI "unsigned int elf_flagphdr(Elf *" elf ", Elf_Cmd " cmd ", unsigned int " flags ");"

.SH DESCRIPTION
The .B elf_flagphdr function sets or clears flags for the program header table of the ELF descriptor referred to by .I elf. This function can be used to control various aspects of how the program header table is handled.

.SH PARAMETERS
.TP
.I elf
An .I Elf pointer to the ELF descriptor for which the program header table flags are to be set or cleared. The ELF descriptor must be valid.

.TP
.I cmd
An .I Elf_Cmd value specifying the operation to be performed. This can be one of the following:
.RS
.IP \- ELF_C_SET
Set the specified flags.
.IP \- ELF_C_CLR
Clear the specified flags.
.RE

.TP
.I flags
An .I unsigned int value specifying the flags to be set or cleared. Possible flags include:
.RS
.IP \- ELF_F_DIRTY
Indicate that the program header table has been modified.
.RE

.SH RETURN VALUE
The .B elf_flagphdr function returns the updated flags for the program header table. If an error occurs, it returns 0 and sets an appropriate error code.

.SH ERRORS
If .B elf_flagphdr fails, it sets the following error codes:

.TP
.B ELFARG
The .I elf parameter is NULL or invalid.

.TP
.B ELFERR
An unspecified internal error occurred.

.SH EXAMPLES
.B "Example 1: Set the ELF_F_DIRTY flag for an ELF program header table"
.nf
.in +4
#include <libelf.h>

Elf *elf = ...; // Assume elf is a valid Elf pointer

if (elf_flagphdr(elf, ELF_C_SET, ELF_F_DIRTY) == 0) {
    // Handle error
} else {
    // Flag set successfully
}
.in -4
.fi

.SH SEE ALSO
.BR elf (3),
.BR elf_flagdata (3),
.BR elf_flagehdr (3),
.BR elf_flagelf (3),
.BR elf_flagscn (3),
.BR elf_flagshdr (3),
.BR libelf (3)

.SH AUTHORS
Elfutils was written by the Elfutils development team.

.SH COPYRIGHT
Copyright Â© 2024 Elfutils Development Team.
This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

